diff --git a/CMakeLists.txt b/CMakeLists.txt
index ba3ec7bce..7ca1894fd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -446,13 +446,13 @@ configure_file(
 
 # Target needs to be declared before the components so that they can add
 # dependencies to this target so they can run their own custom uninstall rules.
-add_custom_target(uninstall
-  COMMAND
-  "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
-  COMMENT "Uninstalling..."
-  USES_TERMINAL
-  VERBATIM
-)
+# add_custom_target(uninstall
+#   COMMAND
+#   "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
+#   COMMENT "Uninstalling..."
+#   USES_TERMINAL
+#   VERBATIM
+# )
 
 ################################################################################
 # CMake build file locations
diff --git a/src/math/lp/column_info.h b/src/math/lp/column_info.h
index 1dc0c60c7..9cbeea66c 100644
--- a/src/math/lp/column_info.h
+++ b/src/math/lp/column_info.h
@@ -47,7 +47,7 @@ public:
             m_lower_bound_is_strict == c.m_lower_bound_is_strict &&
             m_upper_bound_is_set == c.m_upper_bound_is_set&&
             m_upper_bound_is_strict == c.m_upper_bound_is_strict&&
-            (!m_lower_bound_is_set || m_lower_bound == c.m_low_bound) &&
+            (!m_lower_bound_is_set || m_lower_bound == c.m_lower_bound) &&
             (!m_upper_bound_is_set || m_upper_bound == c.m_upper_bound) &&
             m_cost == c.m_cost &&
             m_is_fixed == c.m_is_fixed &&
diff --git a/src/math/lp/static_matrix.h b/src/math/lp/static_matrix.h
index 9d6bb8599..42dd476b5 100644
--- a/src/math/lp/static_matrix.h
+++ b/src/math/lp/static_matrix.h
@@ -79,7 +79,7 @@ public:
         ref(static_matrix & m, unsigned row, unsigned col):m_matrix(m), m_row(row), m_col(col) {}
         ref & operator=(T const & v) { m_matrix.set( m_row, m_col, v); return *this; }
 
-        ref operator=(ref & v) { m_matrix.set(m_row, m_col, v.m_matrix.get(v.m_row, v.m_col)); return *this; }
+        ref operator=(ref & v) { m_matrix.set(m_row, m_col, v.m_matrix.get_elem(v.m_row, v.m_col)); return *this; }
 
         operator T () const { return m_matrix.get_elem(m_row, m_col); }
     };
diff --git a/src/math/lp/static_matrix_def.h b/src/math/lp/static_matrix_def.h
index 0370ee899..514b48703 100644
--- a/src/math/lp/static_matrix_def.h
+++ b/src/math/lp/static_matrix_def.h
@@ -92,7 +92,7 @@ static_matrix<T, X>::static_matrix(static_matrix const &A, unsigned * /* basis *
     init_row_columns(m, m);
     for (; m-- > 0; ) 
         for (auto & col : A.m_columns[m]) 
-            set(col.var(), m, A.get_value_of_column_cell(col));
+            set(col.var(), m, A.get_val(col));
 }
 
 template <typename T, typename X> void static_matrix<T, X>::clear() {
diff --git a/src/util/memory_manager.cpp b/src/util/memory_manager.cpp
index 290881ba5..a3db94d7a 100644
--- a/src/util/memory_manager.cpp
+++ b/src/util/memory_manager.cpp
@@ -29,6 +29,8 @@ Copyright (c) 2015 Microsoft Corporation
 # define malloc_usable_size _msize
 #endif
 
+#undef HAS_MALLOC_USABLE_SIZE
+
 // The following two function are automatically generated by the mk_make.py script.
 // The script collects ADD_INITIALIZER and ADD_FINALIZER commands in the .h files.
 // For example, rational.h contains
